***************
*** 180,195 ****
       * @throws NullPointerException if other is <code>null</code>
       */
      public int compareTo(Object other) {
-         if (other == this) {
-             return 0;
-         }
-         if (other.getClass() != this.getClass()) {
-             if (other.getClass().getName().equals(this.getClass().getName())) {
-                 return iValue - getValueInOtherClassLoader(other);
-             }
-             throw new ClassCastException(
-                     "Different enum class '" + ClassUtils.getShortClassName(other.getClass()) + "'");
-         }
          return iValue - ((ValuedEnum) other).iValue;
      }
  
--- 180,185 ----
       * @throws NullPointerException if other is <code>null</code>
       */
      public int compareTo(Object other) {
          return iValue - ((ValuedEnum) other).iValue;
      }
  
***************
*** 199,218 ****
       * @param other  the object to determine the value for
       * @return the value
       */
-     private int getValueInOtherClassLoader(Object other) {
-         try {
-             Method mth = other.getClass().getMethod("getValue", null);
-             Integer value = (Integer) mth.invoke(other, null);
-             return value.intValue();
-         } catch (NoSuchMethodException e) {
              // ignore - should never happen
-         } catch (IllegalAccessException e) {
              // ignore - should never happen
-         } catch (InvocationTargetException e) {
              // ignore - should never happen
-         }
-         throw new IllegalStateException("This should not happen");
-     }
  
      /**
       * <p>Human readable description of this <code>Enum</code> item.</p>
--- 189,197 ----
       * @param other  the object to determine the value for
       * @return the value
       */
              // ignore - should never happen
              // ignore - should never happen
              // ignore - should never happen
  
      /**
       * <p>Human readable description of this <code>Enum</code> item.</p>
