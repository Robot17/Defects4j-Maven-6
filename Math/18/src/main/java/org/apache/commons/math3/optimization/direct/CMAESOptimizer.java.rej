***************
*** 929,935 ****
              double[] res = new double[x.length];
              for (int i = 0; i < x.length; i++) {
                  double diff = boundaries[1][i] - boundaries[0][i];
-                 res[i] = (x[i] - boundaries[0][i]) / diff;
              }
              return res;
          }
--- 929,935 ----
              double[] res = new double[x.length];
              for (int i = 0; i < x.length; i++) {
                  double diff = boundaries[1][i] - boundaries[0][i];
+                 res[i] = x[i] / diff;
              }
              return res;
          }
***************
*** 955,961 ****
              double[] res = new double[x.length];
              for (int i = 0; i < x.length; i++) {
                  double diff = boundaries[1][i] - boundaries[0][i];
-                 res[i] = diff * x[i] + boundaries[0][i];
              }
              return res;
          }
--- 955,961 ----
              double[] res = new double[x.length];
              for (int i = 0; i < x.length; i++) {
                  double diff = boundaries[1][i] - boundaries[0][i];
+                 res[i] = diff * x[i];
              }
              return res;
          }
***************
*** 987,998 ****
                  return true;
              }
  
  
              for (int i = 0; i < x.length; i++) {
-                 if (x[i] < 0) {
                      return false;
                  }
-                 if (x[i] > 1.0) {
                      return false;
                  }
              }
--- 987,1000 ----
                  return true;
              }
  
+             final double[] bLoEnc = encode(boundaries[0]);
+             final double[] bHiEnc = encode(boundaries[1]);
  
              for (int i = 0; i < x.length; i++) {
+                 if (x[i] < bLoEnc[i]) {
                      return false;
                  }
+                 if (x[i] > bHiEnc[i]) {
                      return false;
                  }
              }
