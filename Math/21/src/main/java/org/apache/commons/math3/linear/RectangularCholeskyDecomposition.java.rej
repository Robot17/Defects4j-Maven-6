***************
*** 66,72 ****
          final double[][] c = matrix.getData();
          final double[][] b = new double[order][order];
  
-         int[] swap  = new int[order];
          int[] index = new int[order];
          for (int i = 0; i < order; ++i) {
              index[i] = i;
--- 66,71 ----
          final double[][] c = matrix.getData();
          final double[][] b = new double[order][order];
  
          int[] index = new int[order];
          for (int i = 0; i < order; ++i) {
              index[i] = i;
***************
*** 76,96 ****
          for (boolean loop = true; loop;) {
  
              // find maximal diagonal element
-             swap[r] = r;
              for (int i = r + 1; i < order; ++i) {
                  int ii  = index[i];
-                 int isi = index[swap[i]];
-                 if (c[ii][ii] > c[isi][isi]) {
-                     swap[r] = i;
                  }
              }
  
  
              // swap elements
-             if (swap[r] != r) {
-                 int tmp = index[r];
-                 index[r] = index[swap[r]];
-                 index[swap[r]] = tmp;
              }
  
              // check diagonal element
--- 75,98 ----
          for (boolean loop = true; loop;) {
  
              // find maximal diagonal element
+             int swapR = r;
              for (int i = r + 1; i < order; ++i) {
                  int ii  = index[i];
+                 int isr = index[swapR];
+                 if (c[ii][ii] > c[isr][isr]) {
+                     swapR = i;
                  }
              }
  
  
              // swap elements
+             if (swapR != r) {
+                 final int tmpIndex    = index[r];
+                 index[r]              = index[swapR];
+                 index[swapR]          = tmpIndex;
+                 final double[] tmpRow = b[r];
+                 b[r]                  = b[swapR];
+                 b[swapR]              = tmpRow;
              }
  
              // check diagonal element
***************
*** 121,131 ****
                  final double sqrt = FastMath.sqrt(c[ir][ir]);
                  b[r][r] = sqrt;
                  final double inverse  = 1 / sqrt;
                  for (int i = r + 1; i < order; ++i) {
                      final int ii = index[i];
                      final double e = inverse * c[ii][ir];
                      b[i][r] = e;
-                     c[ii][ii] -= e * e;
                      for (int j = r + 1; j < i; ++j) {
                          final int ij = index[j];
                          final double f = c[ii][ij] - e * b[j][r];
--- 123,134 ----
                  final double sqrt = FastMath.sqrt(c[ir][ir]);
                  b[r][r] = sqrt;
                  final double inverse  = 1 / sqrt;
+                 final double inverse2 = 1 / c[ir][ir];
                  for (int i = r + 1; i < order; ++i) {
                      final int ii = index[i];
                      final double e = inverse * c[ii][ir];
                      b[i][r] = e;
+                     c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;
                      for (int j = r + 1; j < i; ++j) {
                          final int ij = index[j];
                          final double f = c[ii][ij] - e * b[j][r];
