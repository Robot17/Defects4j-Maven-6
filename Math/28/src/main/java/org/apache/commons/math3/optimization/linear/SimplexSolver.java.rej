***************
*** 116,121 ****
              // there's a degeneracy as indicated by a tie in the minimum ratio test
  
              // 1. check if there's an artificial variable that can be forced out of the basis
                  for (Integer row : minRatioPositions) {
                      for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
                          int column = i + tableau.getArtificialVariableOffset();
--- 116,122 ----
              // there's a degeneracy as indicated by a tie in the minimum ratio test
  
              // 1. check if there's an artificial variable that can be forced out of the basis
+             if (tableau.getNumArtificialVariables() > 0) {
                  for (Integer row : minRatioPositions) {
                      for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
                          int column = i + tableau.getArtificialVariableOffset();
***************
*** 125,130 ****
                          }
                      }
                  }
  
              // 2. apply Bland's rule to prevent cycling:
              //    take the row for which the corresponding basic variable has the smallest index
--- 126,132 ----
                          }
                      }
                  }
+             }
  
              // 2. apply Bland's rule to prevent cycling:
              //    take the row for which the corresponding basic variable has the smallest index
***************
*** 135,140 ****
              // Additional heuristic: if we did not get a solution after half of maxIterations
              //                       revert to the simple case of just returning the top-most row
              // This heuristic is based on empirical data gathered while investigating MATH-828.
                  Integer minRow = null;
                  int minIndex = tableau.getWidth();
                  for (Integer row : minRatioPositions) {
--- 137,143 ----
              // Additional heuristic: if we did not get a solution after half of maxIterations
              //                       revert to the simple case of just returning the top-most row
              // This heuristic is based on empirical data gathered while investigating MATH-828.
+             if (getIterations() < getMaxIterations() / 2) {
                  Integer minRow = null;
                  int minIndex = tableau.getWidth();
                  for (Integer row : minRatioPositions) {
***************
*** 149,154 ****
                      }
                  }
                  return minRow;
          }
          return minRatioPositions.get(0);
      }
--- 152,158 ----
                      }
                  }
                  return minRow;
+             }
          }
          return minRatioPositions.get(0);
      }
