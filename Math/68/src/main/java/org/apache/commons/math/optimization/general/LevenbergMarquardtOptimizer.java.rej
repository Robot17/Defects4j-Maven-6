***************
*** 163,168 ****
          setMaxIterations(1000);
  
          // default values for the tuning parameters
          setInitialStepBoundFactor(100.0);
          setCostRelativeTolerance(1.0e-10);
          setParRelativeTolerance(1.0e-10);
--- 163,169 ----
          setMaxIterations(1000);
  
          // default values for the tuning parameters
+         setConvergenceChecker(null);
          setInitialStepBoundFactor(100.0);
          setCostRelativeTolerance(1.0e-10);
          setParRelativeTolerance(1.0e-10);
***************
*** 244,254 ****
          // outer loop
          lmPar = 0;
          boolean firstIteration = true;
          while (true) {
  
              incrementIterationsCounter();
  
              // compute the Q.R. decomposition of the jacobian matrix
              updateJacobian();
              qrDecomposition();
  
--- 245,257 ----
          // outer loop
          lmPar = 0;
          boolean firstIteration = true;
+         VectorialPointValuePair current = new VectorialPointValuePair(point, objective);
          while (true) {
  
              incrementIterationsCounter();
  
              // compute the Q.R. decomposition of the jacobian matrix
+             VectorialPointValuePair previous = current;
              updateJacobian();
              qrDecomposition();
  
***************
*** 300,306 ****
              }
              if (maxCosine <= orthoTolerance) {
                  // convergence has been reached
-                 return new VectorialPointValuePair(point, objective);
              }
  
              // rescale if necessary
--- 303,309 ----
              }
              if (maxCosine <= orthoTolerance) {
                  // convergence has been reached
+                 return current;
              }
  
              // rescale if necessary
***************
*** 342,347 ****
  
                  // evaluate the function at x + p and calculate its norm
                  updateResidualsAndCost();
  
                  // compute the scaled actual reduction
                  double actRed = -1.0;
--- 345,351 ----
  
                  // evaluate the function at x + p and calculate its norm
                  updateResidualsAndCost();
+                 current = new VectorialPointValuePair(point, objective);
  
                  // compute the scaled actual reduction
                  double actRed = -1.0;
***************
*** 410,423 ****
                  }
  
                  // tests for convergence.
                      // we use the vectorial convergence checker
                      // we use the Levenberg-Marquardt specific convergence parameters
                      if (((Math.abs(actRed) <= costRelativeTolerance) &&
                           (preRed <= costRelativeTolerance) &&
                           (ratio <= 2.0)) ||
                          (delta <= parRelativeTolerance * xNorm)) {
-                         return new VectorialPointValuePair(point, objective);
                      }
  
                  // tests for termination and stringent tolerances
                  // (2.2204e-16 is the machine epsilon for IEEE754)
--- 414,433 ----
                  }
  
                  // tests for convergence.
+                 if (checker != null) {
                      // we use the vectorial convergence checker
+                     if (checker.converged(getIterations(), previous, current)) {
+                         return current;                        
+                     }
+                 } else {
                      // we use the Levenberg-Marquardt specific convergence parameters
                      if (((Math.abs(actRed) <= costRelativeTolerance) &&
                           (preRed <= costRelativeTolerance) &&
                           (ratio <= 2.0)) ||
                          (delta <= parRelativeTolerance * xNorm)) {
+                         return current;
                      }
+                 }
  
                  // tests for termination and stringent tolerances
                  // (2.2204e-16 is the machine epsilon for IEEE754)
