***************
*** 346,355 ****
           * this only. Indeed, if this[i] = 0d and v[i] = 0d, then
           * this[i] / v[i] = NaN, and not 0d.
           */
-         Iterator iter = entries.iterator();
-         while (iter.hasNext()) {
-             iter.advance();
-             res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));
          }
          return res;
      }
--- 346,354 ----
           * this only. Indeed, if this[i] = 0d and v[i] = 0d, then
           * this[i] / v[i] = NaN, and not 0d.
           */
+         final int n = getDimension();
+         for (int i = 0; i < n; i++) {
+             res.setEntry(i, this.getEntry(i) / v.getEntry(i));
          }
          return res;
      }
***************
*** 371,376 ****
           *
           * These special cases are handled below.
           */
          return res;
      }
  
--- 370,387 ----
           *
           * These special cases are handled below.
           */
+         if (v.isNaN() || v.isInfinite()) {
+             final int n = getDimension();
+             for (int i = 0; i < n; i++) {
+                 final double y = v.getEntry(i);
+                 if (Double.isNaN(y)) {
+                     res.setEntry(i, Double.NaN);
+                 } else if (Double.isInfinite(y)) {
+                     final double x = this.getEntry(i);
+                     res.setEntry(i, x * y);
+                 }
+             }
+         }
          return res;
      }
  
