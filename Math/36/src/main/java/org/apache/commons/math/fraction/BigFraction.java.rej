***************
*** 683,690 ****
      @Override
      public double doubleValue() {
          double result = numerator.doubleValue() / denominator.doubleValue();
              // Numerator and/or denominator must be out of range:
              // Calculate how far to shift them to put them in range.
          return result;
      }
  
--- 683,696 ----
      @Override
      public double doubleValue() {
          double result = numerator.doubleValue() / denominator.doubleValue();
+         if (Double.isNaN(result)) {
              // Numerator and/or denominator must be out of range:
              // Calculate how far to shift them to put them in range.
+             int shift = Math.max(numerator.bitLength(),
+                                  denominator.bitLength()) - Double.MAX_EXPONENT;
+             result = numerator.shiftRight(shift).doubleValue() /
+                 denominator.shiftRight(shift).doubleValue();
+         }
          return result;
      }
  
***************
*** 730,737 ****
      @Override
      public float floatValue() {
          float result = numerator.floatValue() / denominator.floatValue();
              // Numerator and/or denominator must be out of range:
              // Calculate how far to shift them to put them in range.
          return result;
      }
  
--- 736,749 ----
      @Override
      public float floatValue() {
          float result = numerator.floatValue() / denominator.floatValue();
+         if (Double.isNaN(result)) {
              // Numerator and/or denominator must be out of range:
              // Calculate how far to shift them to put them in range.
+             int shift = Math.max(numerator.bitLength(),
+                                  denominator.bitLength()) - Float.MAX_EXPONENT;
+             result = numerator.shiftRight(shift).floatValue() /
+                 denominator.shiftRight(shift).floatValue();
+         }
          return result;
      }
  
