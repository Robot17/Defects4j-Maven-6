***************
*** 41,54 ****
      
      private static final long serialVersionUID = -7105341425736035847L;
  
-     private MockitoCore mockitoCore = new MockitoCore();
-     private ReturnsEmptyValues delegate = new ReturnsEmptyValues();
  
      public Object answer(InvocationOnMock invocation) throws Throwable {
          GenericMetadataSupport returnTypeGenericMetadata =
                  actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());
  
          Class<?> rawType = returnTypeGenericMetadata.rawType();
          if (!mockitoCore.isTypeMockable(rawType)) {
              return delegate.returnValueFor(rawType);
          }
--- 41,56 ----
      
      private static final long serialVersionUID = -7105341425736035847L;
  
+     private transient MockitoCore mockitoCore;
+     private transient ReturnsEmptyValues delegate;
  
      public Object answer(InvocationOnMock invocation) throws Throwable {
          GenericMetadataSupport returnTypeGenericMetadata =
                  actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());
  
          Class<?> rawType = returnTypeGenericMetadata.rawType();
+         instantiateMockitoCoreIfNeeded();
+         instantiateDelegateIfNeeded();
          if (!mockitoCore.isTypeMockable(rawType)) {
              return delegate.returnValueFor(rawType);
          }
***************
*** 56,62 ****
          return getMock(invocation, returnTypeGenericMetadata);
      }
  
  
  
      private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {
      	InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());
--- 58,74 ----
          return getMock(invocation, returnTypeGenericMetadata);
      }
  
+     private synchronized void instantiateMockitoCoreIfNeeded() {
+         if (mockitoCore == null) {
+             mockitoCore = new MockitoCore();
+         }
+     }
  
+     private synchronized void instantiateDelegateIfNeeded() {
+         if (delegate == null) {
+             delegate = new ReturnsEmptyValues();
+         }
+     }
  
      private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {
      	InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());
***************
*** 97,102 ****
                  : withSettings();
  
          return mockSettings
                  .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));
      }
  
--- 109,115 ----
                  : withSettings();
  
          return mockSettings
+ 		        .serializable()
                  .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));
      }
  
***************
*** 111,117 ****
  
      private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {
  
-         container.addAnswer(new Answer<Object>() {
              public Object answer(InvocationOnMock invocation) throws Throwable {
                  return mock;
              }
--- 124,130 ----
  
      private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {
  
+         container.addAnswer(new SerializableAnswer() {
              public Object answer(InvocationOnMock invocation) throws Throwable {
                  return mock;
              }
***************
*** 120,126 ****
          return mock;
      }
  	
  		
  	
  
      protected GenericMetadataSupport actualParameterizedType(Object mock) {
--- 133,141 ----
          return mock;
      }
  	
+ 	abstract class SerializableAnswer implements Answer<Object>, Serializable {
  		
+ 	}
  	
  
      protected GenericMetadataSupport actualParameterizedType(Object mock) {
