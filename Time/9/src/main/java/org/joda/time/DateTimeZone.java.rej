***************
*** 255,270 ****
          if (hoursOffset == 0 && minutesOffset == 0) {
              return DateTimeZone.UTC;
          }
          if (minutesOffset < 0 || minutesOffset > 59) {
              throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);
          }
          int offset = 0;
          try {
-             int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);
              if (hoursInMinutes < 0) {
-                 minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);
              } else {
-                 minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);
              }
              offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
          } catch (ArithmeticException ex) {
--- 255,273 ----
          if (hoursOffset == 0 && minutesOffset == 0) {
              return DateTimeZone.UTC;
          }
+         if (hoursOffset < -23 || hoursOffset > 23) {
+             throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
+         }
          if (minutesOffset < 0 || minutesOffset > 59) {
              throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);
          }
          int offset = 0;
          try {
+             int hoursInMinutes = hoursOffset * 60;
              if (hoursInMinutes < 0) {
+                 minutesOffset = hoursInMinutes - minutesOffset;
              } else {
+                 minutesOffset = hoursInMinutes + minutesOffset;
              }
              offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
          } catch (ArithmeticException ex) {
***************
*** 280,285 ****
       * @return the DateTimeZone object for the offset
       */
      public static DateTimeZone forOffsetMillis(int millisOffset) {
          String id = printOffset(millisOffset);
          return fixedOffsetZone(id, millisOffset);
      }
--- 283,291 ----
       * @return the DateTimeZone object for the offset
       */
      public static DateTimeZone forOffsetMillis(int millisOffset) {
+         if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
+             throw new IllegalArgumentException("Millis out of range: " + millisOffset);
+         }
          String id = printOffset(millisOffset);
          return fixedOffsetZone(id, millisOffset);
      }
